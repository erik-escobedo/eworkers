== é-Workers

Given a website which matches workers to customers. 

* A worker is a registered user, who possesses one or more skills like “cooking”, “house cleaning”, “fixing wireless networks”, and so on. 

* A customer, also a registered user, can search for workers by skill.
For example, if a customer needs a worker who can do both cooking and house-cleaning, she will go to the site, choose both these skills from a list, and get a list of workers from which to choose.

* The site would have 1,000 workers, 10,000 customers and 100 skills.

* The challenge: create a prototype of this website, with the main focus on the back end, especially the models and search functionality.

== Solution

The proposed solution to this challenge is presented in this repo.
Given the high number of *Customers* proposed, I decided to focus on the Customer side. By providing skills filters and map navigation Customers can easily find what they are looking for.

Points to notice:

* Frontend uses AngularJS and Coffeescript.
* Skills can be filter using the big input in top.
* Selected skills won't dissapear, even if they don't match the input. This is so Customers don't get confused.
* The map is autocentered and autofocused when results on the left page change.
* In search screen, Google Maps init callback is transformed into a Promise object so it can be used inside Angular Controllers without any loading order problem.
* The SQL running on Backend takes less than 30ms to run.
* The method wrapping that SQL returns a standard `ActiveRecord_Relation` object. Therefore, it's chainable with any other `ActiveRecord` method. I.e. `where`, `limit`, `order`, `first`, etc.
